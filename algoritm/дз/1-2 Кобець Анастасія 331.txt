Практичне заняття 1,2
Кобець Анастасія 331 ФКНФМ

Задача 1. Числа Фібоначчі
# Ініціалізуємо перші два числа Фібоначчі
a, b = 1, 1
index = 1

# Починаємо цикл, який триває, доки не знайдемо потрібне число
while True:
    # Обчислюємо наступне число Фібоначчі
    fib = a + b
    # Оновлюємо значення a та b для наступної ітерації
    a, b = b, fib
    # Збільшуємо лічильник індексу
    index += 1
    # Перевіряємо, чи число Фібоначчі закінчується на "0000"
    if fib % 10000 == 0:
        # Якщо так, виходимо з циклу
        break

# Виводимо номер числа Фібоначчі та саме число
print(f"The Fibonacci number that ends with 0000 is {fib}, found at index {index}")

Результатом виконання буде: 

The Fibonacci number that ends with 0000 is
found at index 7499


Задача 2. Доміно і ейлерові шляхи у графах
# Запитуємо користувача про кількість костяшок доміно
n = int(input("Введіть кількість костяшок доміно: "))

# Ініціалізація масиву ступенів D
D = [0] * n

# Введіть ступені вершин костяшок доміно
for i in range(n):
    domino_degrees = input(f"Введіть ступені вершин {i + 1}-ої костяшки (через пробіл): ").split()
    D[i] = sum(map(int, domino_degrees))

OddDeg = 0  # Кількість вершин з непарними ступенями

# Аналіз масиву ступенів
for j in range(n):
    if D[j] % 2 == 1:
        OddDeg += 1

# За теоремою Ейлера, можливість утворення цепочки визначається за кількістю вершин
# з непарними ступенями - це повинно бути 0 або 2.
if OddDeg == 2:
    print("Можливо утворити цепочку з костяшок доміно.")
else:
    print("Неможливо утворити цепочку з цього числа костяшок доміно.")

Результатом виконання буде: 

Введіть кількість костяшок доміно: 
5
Введіть ступені вершин 1-ої костяшки (через пробіл): 
3
Введіть ступені вершин 2-ої костяшки (через пробіл): 
3
Введіть ступені вершин 3-ої костяшки (через пробіл): 
2
Введіть ступені вершин 4-ої костяшки (через пробіл): 
2
Введіть ступені вершин 5-ої костяшки (через пробіл): 
2
Можливо утворити цепочку з костяшок доміно.


Задача 3. Задача про голандський національний прапор
# Вхідний масив з кульками
colors = [2, 0, 2, 1, 1, 0]

# Ініціалізуємо вказівники для кольорів
blue, white, red = 0, 0, len(colors) - 1

while white <= red:
    if colors[white] == 0:
        # Якщо зустріли синій кольор, міняємо його зі значенням на позиції blue
        # та збільшуємо вказівник для синього кольору.
        colors[blue], colors[white] = colors[white], colors[blue]
        blue += 1
        white += 1
    elif colors[white] == 1:
        # Якщо зустріли білий кольор, просто збільшуємо вказівник для білого кольору.
        white += 1
    else:
        # Якщо зустріли червоний кольор, міняємо його зі значенням на позиції red
        # та зменшуємо вказівник для червоного кольору.
        colors[white], colors[red] = colors[red], colors[white]
        red -= 1

# Результат виводимо після сортування
print(colors)  

Результатом виконання буде: [0, 0, 1, 1, 2, 2]

